@page "/chatting"

@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }

    @foreach (var userMessage in userMessages)
    {
        <div class="row mb-3 d-flex @(userMessage.CurrentUser ? "justify-content-end" : "")">
            <div class="card shadow @(userMessage.CurrentUser ? "color-green mr-5" : "ml-5")" style="width: 18rem;">
                <div class="card-header">
                    @(userMessage.CurrentUser ? "You" : userMessage.Username)
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">@userMessage.Message</li>
                </ul>
                <div class="card-footer">
                    <span class="small">@userMessage.DateSent.ToString("HH:mm | MMM dd")</span>
                </div>
            </div>
        </div>
    }
</div>

<div class="container">
    <div class="row">
        <div class="col-3">
            <input type="text" @bind="usernameInput" class="form-control" placeholder="Your name"
                readonly="@IsUserReadonly" />
        </div>
        <div class="col-6">
            <textarea @bind="messageInput" class="form-control" type="text" placeholder="Start typing..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

@code {
    private HubConnection _hubConnection;
    private List<UserMessage> userMessages = new List<UserMessage>();
    private string usernameInput;
    private string messageInput;
    private bool IsUserReadonly;

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();
        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new UserMessage()
            {
                Username = user,
                Message = message,
                CurrentUser = user == usernameInput,
                DateSent =
    DateTime.Now
            });

            StateHasChanged();
        });

        _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(usernameInput) && !string.IsNullOrWhiteSpace(messageInput))
        {
            await _hubConnection.SendAsync("SendMessage", usernameInput, messageInput);

            IsUserReadonly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}